DICAS:

QUANDO PRECISAR DE FORMULARIOS... SEM NEURA 
>PESQUIZE FORMULARIOS PRONTOS E MOLDE AS SUAS NECESSIDADES !!!

ESTE DAQQUI √â US√ì UM EXEMPLO DE MUITOS !











-------------------------------

B√¥nus
1. A TrybeTrip precisa muito de fotos para divulgar seus concursos. Tendo isso em mente, fa√ßa com que somente quem autorizar o uso de imagens possa enviar suas informa√ß√µes.
Solu√ß√£o:
Esse exerc√≠cio tamb√©m faremos tanto no HTML quanto no Javascript, vamos come√ßar pelo HTML que ser√° bem simples. Lembra do nosso bot√£o submit? Vamos definir que ele comece desabilitado:
Copiar
    <button type="submit" id="submit-btn" disabled>Participar do concurso TrybeTrip</button>
D√™ um refresh na sua p√°gina e note que o bot√£o agora est√° desabilitado.
Agora vamos fazer a fun√ß√£o respons√°vel por habilit√°-lo.
Copiar
function enableSubmit() {
  const submitBtn = document.querySelector('#submit-btn');
  const agreement = document.querySelector('#agreement');
  submitBtn.disabled = !agreement.checked;
}
Talvez o operador ! seja uma novidade para voc√™. Ent√£o vamos explicar o que ele faz e como est√° funcionando nessa solu√ß√£o. Esse operador √© chamado de "bang", e ele representa uma nega√ß√£o, ou seja, o contr√°rio do retorno de alguma coisa. Se algo for verdadeiro ele retornar√° falso e vice-versa.
No nosso c√≥digo estamos dizendo que a propriedade disabled do submitBtn √© igual a nega√ß√£o da propriedade checked da checkbox agreement . Sendo assim, se a checkbox estiver "checkada" nosso bot√£o n√£o estar√° desabilitado (estar√° habilitado). Massa, n√©? Esse operador ser√° muito √∫til em sua vida como pessoa desenvolvedora.
Assim como as demais, vamos adicionar essa fun√ß√£o num addEventListener , por√©m com checkBoxes n√£o usamos 'click' e sim 'change' .
Copiar
window.onload = function() {
  const clearBtn = document.querySelector('#clear-btn');
  clearBtn.addEventListener('click', clearFields);
  const submitBtn = document.querySelector('#submit-btn');
  submitBtn.addEventListener('click', handleSubmit);
  const agreement = document.querySelector('#agreement');
  agreement.addEventListener('change', enableSubmit);
};
Teste para ver se est√° tudo funcionando como deveria. √â uma fun√ß√£o bem legal, n√©? E √© bastante utilizada.
2. Fa√ßa a valida√ß√£o dos campos com limite de caracteres. Caso n√£o estejam dentro do esperado ao clicar no bot√£o de submit, um alerta deve ser mostrado com a mensagem: 'Dados Inv√°lidos'. Caso contr√°rio, a mensagem 'Dados enviados com sucesso! Obrigado por participar do concurso TrybeTrip.' dever√° aparecer na tela.
Solu√ß√£o:
Agora sim todos os campos est√£o criados como deveriam dentro do HTML, portanto esse exerc√≠cio ser√° feito somente no javascript. Primeiramente faremos a fun√ß√£o que validar√° esses dados:
Copiar


function textInputValidation() {
  const email = document.querySelector('#email').value.length;
  const invalidEmail = email < 10 || email > 50;

  const name = document.querySelector('#fullName').value.length;
  const invalidName = name < 10 || name > 40;

  const reason = document.querySelector('#why').value.length;
  const invalidReason = reason > 500;

  if (invalidEmail || invalidName || invalidReason) {
    return false;
  }
  else {
    return true;
  }
}
Agora vamos colocar ela dentro da nossa fun√ß√£o handleSubmit que j√° est√° funcionando.
Copiar

function handleSubmit(event) {
  event.preventDefault();
  const validation = textInputValidation();
  if (validation === false) {
    alert('Dados inv√°lidos');
  } else {
    alert('Dados enviados com sucesso! Obrigado por participar do concurso TrybeTrip.');
  }
}
Tente clicar no bot√£o sem ter preenchido um dos campos de texto e veja se o alerta aparece. Legal, n√£o √© mesmo?
Esses foram os exerc√≠cios de hoje, esperamos que tenham se divertido e aprendido bastante, at√© a pr√≥xima.
¬© Trybe 2022
¬∑
Manual da Pessoa Estudante
Feito e constantemente atualizado pelo time Trybe com Elixir, Phoenix, React, Tailwind CSS e üíö

